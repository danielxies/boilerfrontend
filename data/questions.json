{
  "two-sum": {
    "title": "Two Sum",
    "number": 1,
    "difficulty": "Easy",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers in nums such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    "examples": [
      "Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].",
      "Input: nums = [3,2,4], target = 6\nOutput: [1,2]",
      "Input: nums = [3,3], target = 6\nOutput: [0,1]"
    ],
    "constraints": [
      "2 <= nums.length <= 104",
      "-109 <= nums[i] <= 109",
      "-109 <= target <= 109",
      "Only one valid answer exists."
    ],
    "starterCode": "# Problem: Two Sum\n# Given an array of integers and a target sum, find two numbers that add up to the target.\n# Time Complexity: O(n), Space Complexity: O(n) expected\n\ndef two_sum(nums: list[int], target: int) -> list[int]:\n    # Write your code here\n    pass",
    "solution": "def two_sum(nums: list[int], target: int) -> list[int]:\n    num_map = {}\n    \n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    \n    return []"
  },
  "reverse-string": {
    "title": "Reverse String",
    "number": 2,
    "difficulty": "Easy",
    "description": "Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.",
    "examples": [
      "Input: s = ['h','e','l','l','o']\nOutput: ['o','l','l','e','h']",
      "Input: s = ['H','a','n','n','a','h']\nOutput: ['h','a','n','n','a','H']"
    ],
    "constraints": [
      "1 <= s.length <= 105",
      "s[i] is a printable ascii character"
    ],
    "starterCode": "# Problem: Reverse String\n# Reverse a string in-place using two pointers approach.\n# Time Complexity: O(n), Space Complexity: O(1) required\n\ndef reverse_string(s: list[str]) -> None:\n    # Write your code here\n    pass",
    "solution": "def reverse_string(s: list[str]) -> None:\n    left, right = 0, len(s) - 1\n    while left < right:\n        s[left], s[right] = s[right], s[left]\n        left += 1\n        right -= 1"
  }
} 